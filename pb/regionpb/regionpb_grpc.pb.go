// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: regionpb.proto

package regionpb

import (
	context "context"
	commonpb "github.com/AhmetSBulbul/quarterback-server/pb/commonpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegionServiceClient is the client API for RegionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegionServiceClient interface {
	ListCountry(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*CountryListResponse, error)
	// Should we use query and pagination?
	ListCity(ctx context.Context, in *commonpb.GetByIdRequest, opts ...grpc.CallOption) (*CityListResponse, error)
	ListDistrict(ctx context.Context, in *commonpb.GetByIdRequest, opts ...grpc.CallOption) (*DistrictListResponse, error)
}

type regionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegionServiceClient(cc grpc.ClientConnInterface) RegionServiceClient {
	return &regionServiceClient{cc}
}

func (c *regionServiceClient) ListCountry(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*CountryListResponse, error) {
	out := new(CountryListResponse)
	err := c.cc.Invoke(ctx, "/region.RegionService/ListCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionServiceClient) ListCity(ctx context.Context, in *commonpb.GetByIdRequest, opts ...grpc.CallOption) (*CityListResponse, error) {
	out := new(CityListResponse)
	err := c.cc.Invoke(ctx, "/region.RegionService/ListCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionServiceClient) ListDistrict(ctx context.Context, in *commonpb.GetByIdRequest, opts ...grpc.CallOption) (*DistrictListResponse, error) {
	out := new(DistrictListResponse)
	err := c.cc.Invoke(ctx, "/region.RegionService/ListDistrict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegionServiceServer is the server API for RegionService service.
// All implementations must embed UnimplementedRegionServiceServer
// for forward compatibility
type RegionServiceServer interface {
	ListCountry(context.Context, *commonpb.Empty) (*CountryListResponse, error)
	// Should we use query and pagination?
	ListCity(context.Context, *commonpb.GetByIdRequest) (*CityListResponse, error)
	ListDistrict(context.Context, *commonpb.GetByIdRequest) (*DistrictListResponse, error)
	mustEmbedUnimplementedRegionServiceServer()
}

// UnimplementedRegionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRegionServiceServer struct {
}

func (UnimplementedRegionServiceServer) ListCountry(context.Context, *commonpb.Empty) (*CountryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCountry not implemented")
}
func (UnimplementedRegionServiceServer) ListCity(context.Context, *commonpb.GetByIdRequest) (*CityListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCity not implemented")
}
func (UnimplementedRegionServiceServer) ListDistrict(context.Context, *commonpb.GetByIdRequest) (*DistrictListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDistrict not implemented")
}
func (UnimplementedRegionServiceServer) mustEmbedUnimplementedRegionServiceServer() {}

// UnsafeRegionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegionServiceServer will
// result in compilation errors.
type UnsafeRegionServiceServer interface {
	mustEmbedUnimplementedRegionServiceServer()
}

func RegisterRegionServiceServer(s grpc.ServiceRegistrar, srv RegionServiceServer) {
	s.RegisterService(&RegionService_ServiceDesc, srv)
}

func _RegionService_ListCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServiceServer).ListCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/region.RegionService/ListCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServiceServer).ListCountry(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionService_ListCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServiceServer).ListCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/region.RegionService/ListCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServiceServer).ListCity(ctx, req.(*commonpb.GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionService_ListDistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServiceServer).ListDistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/region.RegionService/ListDistrict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServiceServer).ListDistrict(ctx, req.(*commonpb.GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegionService_ServiceDesc is the grpc.ServiceDesc for RegionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "region.RegionService",
	HandlerType: (*RegionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCountry",
			Handler:    _RegionService_ListCountry_Handler,
		},
		{
			MethodName: "ListCity",
			Handler:    _RegionService_ListCity_Handler,
		},
		{
			MethodName: "ListDistrict",
			Handler:    _RegionService_ListDistrict_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "regionpb.proto",
}
